from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from transformers import pipeline

class Summarizer:
    def __init__(self, embedding_model_name, summarizer_model_name):
        """
        Creates a new summarizer object
        :param embedding_model_name: The name of the Sentence Transformer embedding model to be used for the semantic similarity search.
        It must be taken from the Huggingface site.
        :param summarizer_model_name: The name of the model to use for summarization. It must be taken from the Huggingface site.
        """
        self.embedding_model = SentenceTransformer(embedding_model_name)
        self.summarizer = pipeline("summarization", model=summarizer_model_name)

    def find_article(self, articles, user_query):
        """
        Retrieves the most similar article to the user query from the given list of articles.
        :param articles: The list of candidate articles.
        :param user_query: The user query.
        :return: The article that is the most similar to the user query.
        """
        article_names = list(articles.keys())
        # Compute embeddings for article titles and the user query
        articles_embeddings = self.embedding_model.encode(article_names)
        query_embedding = self.embedding_model.encode([user_query])
        # Compute the cosine similarity
        similarities = cosine_similarity(articles_embeddings, query_embedding).reshape(-1)
        # Retrieve the article with the highest cosine similarity to the user query
        best_match_idx = similarities.argmax().item()
        matched_article = articles[article_names[best_match_idx]]

        return matched_article

    def summarize_article(self, article, max_length):
        """
        This function summarizes the article generating a summary with max_length words at most.
        :param article: The article to summarize
        :param max_length: The maximum number of words to be generated by the ML model
        :return: The summary of the article
        """
        string_to_summarize = "Paper information:\n"
        for key, value in article.items():
            if key == "authors":
                value = f"{value[0]} et al."
            string_to_summarize += f"The paper {key} is: {value}\n"

        summary = self.summarizer(string_to_summarize, min_length=10, max_length=max_length)[0]["summary_text"]
        return summary
